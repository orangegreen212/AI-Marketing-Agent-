# -*- coding: utf-8 -*-
"""app_py.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M5vanzfacy_P_WaYXOj7UGTjdjBsRqNq
"""

# app.py

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# === HEADER ===
st.title("📉 Customer Retention & Churn Dashboard")

# === Data Loading from Google Drive (if the file is shared publicly) ===
csv_url = "https://drive.google.com/file/d/1cCxHQriyEPCPcZ35gcuxpJRUSU7mKopI/view?usp=sharing"
@st.cache_data
def load_data():
    return pd.read_csv(csv_url)

df = load_data()

# === Overall Statistics ===
st.subheader("📊 Overview")
col1, col2, col3 = st.columns(3)
col1.metric("Total Users", f"{len(df):,}")
col2.metric("Average Activity Probability", f"{df['predicted_activity_proba'].mean():.2f}")
col3.metric("Churn Rate", f"{1 - df['predicted_activity_binary'].mean():.2%}")

# === Filters ===
st.sidebar.header("🔍 Filters")
segment = st.sidebar.selectbox("Behavioral Segment", ["All"] + df['Behavioral_Segment'].unique().tolist())
customer_type = st.sidebar.selectbox("Customer Type", ["All"] + df['customer_type'].unique().tolist())

filtered_df = df.copy()
if segment != "All":
    filtered_df = filtered_df[filtered_df['Behavioral_Segment'] == segment]
if customer_type != "All":
    filtered_df = filtered_df[filtered_df['customer_type'] == customer_type]

# === Churn vs Activity Chart ===
st.subheader("📈 Activity Probability Distribution")
fig = px.histogram(filtered_df, x="predicted_activity_proba", nbins=30,
                   color="predicted_activity_binary", barmode='overlay',
                   labels={"predicted_activity_binary": "Active"})
st.plotly_chart(fig, use_container_width=True)

# === Users Table ===
st.subheader("👥 Users")
st.dataframe(filtered_df[['customer_type', 'Behavioral_Segment', 'RFM_Segment',
                          'predicted_activity_proba', 'predicted_activity_binary',
                          'total_spend_sum_last_3M', 'Recency', 'Frequency', 'Monetary']].sort_values(
                          by='predicted_activity_proba', ascending=False).head(20))

# === User Details ===
st.subheader("🔎 Detailed User Profile")
user_id = st.selectbox("Select user_id", df['Unnamed: 0'].unique())
user = df[df['Unnamed: 0'] == user_id].squeeze()

st.markdown(f"""
- **Customer Type**: {user['customer_type']}
- **Segment**: {user['Behavioral_Segment']}
- **RFM Segment**: {user['RFM_Segment']}
- **Activity Probability**: `{user['predicted_activity_proba']:.2f}`
- **Purchases in last 3 months**: `{user['num_purchases_sum_last_3M']}`
- **Spend**: `${user['total_spend_sum_last_3M']:.2f}`
""")