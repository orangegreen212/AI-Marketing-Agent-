# -*- coding: utf-8 -*-
"""app_py.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M5vanzfacy_P_WaYXOj7UGTjdjBsRqNq
"""

# app.py

import streamlit as st
import pandas as pd
import plotly.express as px

# ========== Custom CSS ==========
st.markdown("""
    <style>
        .main { background-color: #f9f9f9; }
        h1 { color: #3F8CFF; }
        .stMetricValue { color: #1a1a1a; font-weight: bold; }
        .stTabs [data-baseweb="tab-list"] {
            background-color: #f0f2f6;
            border-radius: 8px;
            padding: 0.25rem;
        }
    </style>
""", unsafe_allow_html=True)

# === HEADER ===
st.markdown("<h1 style='text-align: center; color: #3F8CFF;'>üìâ Customer Retention & Churn Dashboard</h1>", unsafe_allow_html=True)

# === Data Loading ===
csv_url = "https://drive.google.com/uc?id=1cCxHQriyEPCPcZ35gcuxpJRUSU7mKopI"

@st.cache_data
def load_data():
    return pd.read_csv(csv_url)

df = load_data()

# === Filters ===
st.sidebar.header("üîç Filters")
segment = st.sidebar.selectbox("Behavioral Segment", ["All"] + sorted(df['Behavioral_Segment'].dropna().unique().tolist()))
customer_type = st.sidebar.selectbox("Customer Type", ["All"] + sorted(df['customer_type'].dropna().unique().tolist()))

# === Data Filtering ===
filtered_df = df.copy()
if segment != "All":
    filtered_df = filtered_df[filtered_df['Behavioral_Segment'] == segment]
if customer_type != "All":
    filtered_df = filtered_df[filtered_df['customer_type'] == customer_type]

# === Tabs ===
tab1, tab2 = st.tabs(["üìä Overview", "üß† AI Recommendations"])

# --- Tab 1: Overview ---
with tab1:
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("üë• Users", f"{len(filtered_df):,}")
    col2.metric("üìà Avg Activity", f"{filtered_df['predicted_activity_proba'].mean():.2f}")
    col3.metric("‚ùå Churn Rate", f"{1 - filtered_df['predicted_activity_binary'].mean():.2%}")
    col4.metric("üí∏ Total Spend", f"${filtered_df['total_spend_sum_last_3M'].sum():,.2f}")

    st.subheader("üìà Distribution of Predicted Activity")
    fig1 = px.histogram(filtered_df, 
                        x="predicted_activity_proba", 
                        color="predicted_activity_binary",
                        color_discrete_map={1: "green", 0: "red"},
                        nbins=30,
                        barmode="overlay",
                        labels={"predicted_activity_binary": "Active?"})
    st.plotly_chart(fig1, use_container_width=True)

    st.subheader("üìå Retention Rate by Segment")
    seg_chart = (
        filtered_df.groupby("Behavioral_Segment")["predicted_activity_binary"]
        .mean().reset_index().rename(columns={"predicted_activity_binary": "Retention Rate"})
    )
    fig2 = px.bar(seg_chart, x="Behavioral_Segment", y="Retention Rate", color="Behavioral_Segment")
    st.plotly_chart(fig2, use_container_width=True)

# --- Tab 2: AI Recommendations ---
with tab2:
    st.markdown("### üß† AI Agent Recommendations")

    if segment == "All":
        st.info("Please select a specific Behavioral Segment to generate recommendations.")
    else:
        st.success(f"Segment selected: **{segment}**")

       insights = {
    "promising / active shoppers": [
        "üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º email —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å–∫–∏–¥–∫–∞–º–∏.",
        "‚úÖ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.",
        "üß≤ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö."
    ],
    "newcomers / casual visitors": [
        "üì¢ –ü—Ä–æ–≤–µ–¥–∏—Ç–µ welcome-–∫–∞–º–ø–∞–Ω–∏—é —Å –±–æ–Ω—É—Å–∞–º–∏.",
        "üîç –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –∏ FAQ.",
        "üì¨ –ù–∞–ø–æ–º–Ω–∏—Ç–µ –∏–º –æ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö (–∫–æ—Ä–∑–∏–Ω–∞, –ø—Ä–æ—Å–º–æ—Ç—Ä)."
    ],
    "at risk": [
        "üî• –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ '—Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è'.",
        "üïµÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏.",
        "üìâ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–æ–≥–¥–∞ –æ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –±–æ–Ω—É—Å."
    ],
    "can't lose them": [
        "üéÅ –ü–æ–¥–∞—Ä–æ–∫ –∑–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è.",
        "üì£ –£—á–∞—Å—Ç–≤—É–π—Ç–µ —Å –Ω–∏–º–∏ –≤ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞—Ö.",
        "ü§ù –°–¥–µ–ª–∞–π—Ç–µ –æ–ø—Ä–æ—Å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ ‚Äî –ø–æ–∫–∞–∂–∏—Ç–µ –∑–∞–±–æ—Ç—É."
    ],
    "Champions / VIP": [
        "üëë –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å.",
        "üéâ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
        "üíé –ü—Ä–æ–≥—Ä–∞–º–º–∞ VIP-–±–æ–Ω—É—Å–æ–≤ –∏ –ø—Ä–µ–º–∏–π."
    ]
}


        for tip in insights.get(segment, ["‚ùì –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞."]):
            st.markdown(f"- {tip}")
